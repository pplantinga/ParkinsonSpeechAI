# ################################
# Model: Parkinson's identification with ECAPA
# Author: Peter Plantinga
# ################################

# Basic parameters
seed: 2078
__set_seed: !apply:torch.manual_seed [!ref <seed>]
lr_factor: 1

# Save folders and paths
fold: 1
folds: 5
experiment_name: hubert_audioset_ecapa_tdnn
storage_folder: results
seed_folder: !ref <storage_folder>/<experiment_name>/seed_<seed>
output_folder: !ref <seed_folder>/fold_<fold>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt
predictions_file: !ref <output_folder>/predictions.csv
encoded_labels: !ref <save_folder>/label_encoder.txt

# Data files
data_folder: !PLACEHOLDER
noise_folder: !ref <data_folder>/../noise
rir_folder: !ref <data_folder>/../rir
manifest_file: manifest.json
noise_annotation: !ref <data_folder>/noise.csv
rir_annotation: !ref <data_folder>/rir.csv
overall_metrics_json: !ref <seed_folder>/overall_metrics.json
predictions_json: !ref <seed_folder>/predictions.json

# Data for augmentation
NOISE_DATASET_URL: https://www.dropbox.com/scl/fi/a09pj97s5ifan81dqhi4n/noises.zip?rlkey=j8b0n9kdjdr32o1f06t0cw5b7&dl=1
RIR_DATASET_URL: https://www.dropbox.com/scl/fi/linhy77c36mu10965a836/RIRs.zip?rlkey=pg9cu8vrpn2u173vhiqyu743u&dl=1

# Training parameters
epochs: 10
warmup_epochs: 2
samples_per_epoch: 480 # Estimate
total_batch_size: 8
batch_size: 2
grad_accumulation_factor: !ref <total_batch_size> // <batch_size>
lr: 0.00005
sample_rate: 16000
chunk_size: 30.0 # seconds

# Test parameters
test_batch_size: 1
metric_categories: [sex]
threshold: 0.5

# Model parameters
# For the pretrained_source, use the path to the model dir
pretrained_source: !PLACEHOLDER
freeze_pretrained: True
feature_size: 768
embedding_size: 768
dropout: 0.2
out_neurons: 1

# Dataloader options
# Shuffling handled by sampler in train.py
num_workers: 2
train_dataloader_options:
    batch_size: !ref <batch_size>
    num_workers: !ref <num_workers>
    drop_last: True

valid_dataloader_options:
    batch_size: !ref <test_batch_size>
    num_workers: !ref <num_workers>

# AUGMENTATIONS
# -------------
# Download and prepare the dataset of noisy sequences for augmentation
prepare_noise_data: !name:speechbrain.augment.preparation.prepare_dataset_from_URL
    URL: !ref <NOISE_DATASET_URL>
    dest_folder: !ref <noise_folder>
    ext: wav
    csv_file: !ref <noise_annotation>
    max_length: !ref <chunk_size>

# Add noise to input signal
add_noise: !new:speechbrain.augment.time_domain.AddNoise
    csv_file: !ref <noise_annotation>
    snr_low: 0
    snr_high: 15
    noise_sample_rate: !ref <sample_rate>
    clean_sample_rate: !ref <sample_rate>
    num_workers: !ref <num_workers>

# Download and prepare the dataset of room impulse responses for augmentation
#prepare_rir_data: !name:speechbrain.augment.preparation.prepare_dataset_from_URL
#    URL: !ref <RIR_DATASET_URL>
#    dest_folder: !ref <rir_folder>
#    ext: wav
#    csv_file: !ref <rir_annotation>
#    max_length: !ref <chunk_size>

# Add reverberation to input signal
#add_reverb: !new:speechbrain.augment.time_domain.AddReverb
#    csv_file: !ref <rir_annotation>
#    reverb_sample_rate: !ref <sample_rate>
#    clean_sample_rate: !ref <sample_rate>
#    num_workers: !ref <num_workers>

# Frequency drop: randomly drops a number of frequency bands to zero.
drop_freq: !new:speechbrain.augment.time_domain.DropFreq
    drop_freq_low: 0
    drop_freq_high: 1
    drop_freq_count_low: 1
    drop_freq_count_high: 3
    drop_freq_width: 0.05

# Time drop: randomly drops a number of temporal chunks.
drop_chunk: !new:speechbrain.augment.time_domain.DropChunk
    drop_length_low: 1000
    drop_length_high: 2000
    drop_count_low: 1
    drop_count_high: 5

# Augmenter: Combines previously defined augmentations to perform data augmentation
wav_augment: !new:speechbrain.augment.augmenter.Augmenter
    parallel_augment: False
    concat_original: False
    min_augmentations: 2
    max_augmentations: 2
    augment_prob: 0.9
    augmentations: [!ref <add_noise>, !ref <drop_chunk>]

# Models
#compute_features: !new:speechbrain.integrations.huggingface.wavlm.WavLM
#    source: !ref <pretrained_source>
#    output_norm: True
#    freeze_feature_extractor: True
#    freeze: !ref <freeze_pretrained>
#    save_path: wavlm

#compute_features: !new:speechbrain.lobes.models.huggingface_transformers.whisper.Whisper
#    source: !ref <pretrained_source>
#    encoder_only: True
#    freeze: !ref <freeze_pretrained>
#    save_path: !ref <output_folder>/whisper

compute_features: !new:speechbrain.integrations.huggingface.hubert.HuBERT
    source: !ref <pretrained_source>
    freeze: !ref <freeze_pretrained>
    save_path: !ref <output_folder>/hubert

#compute_features: !new:nemo_encoder.NeMoEncoder
#    source: !ref <pretrained_source>
#    #source: !ref <pretrained_source> / canary-1b.nemo
#    #nemo_type: "MultiTask"
#    #source_dir: !ref <pretrained_source>
#    freeze: !ref <freeze_pretrained>

#compute_features: !new:xeus_encoder.XEUS_Encoder
#    source: !ref <pretrained_source>
#    freeze: !ref <freeze_pretrained>
#    save_path: !ref <output_folder>/xeus

#compute_features: !new:vocal_feat_encoder.VocalFeatureEncoder
#    add_energy: False
#compute_features: !new:speechbrain.lobes.features.VocalFeatures
#    step_size: 0.02
#    log_scores: True

embedding_model: !new:speechbrain.lobes.models.ECAPA_TDNN.ECAPA_TDNN
    input_size: !ref <feature_size>
    channels:
      - !ref <embedding_size>
      - !ref <embedding_size>
      - !ref <embedding_size>
      - !ref <embedding_size>
      - !ref 3 * <embedding_size>
    kernel_sizes: [5, 3, 3, 3, 1]
    dilations: [1, 2, 3, 4, 1]
    groups: [1, 1, 1, 1, 1]
    attention_channels: 128
    lin_neurons: !ref <embedding_size>
    dropout: !ref <dropout>

classifier: !new:speechbrain.lobes.models.ECAPA_TDNN.Classifier
    input_size: !ref <embedding_size>
    out_neurons: !ref <out_neurons>

# Functions
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <epochs>

modules:
    compute_features: !ref <compute_features>
    embedding_model: !ref <embedding_model>
    classifier: !ref <classifier>
    #mean_var_norm: !ref <mean_var_norm>

softmax: !new:speechbrain.nnet.activations.Softmax
log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True

bce_loss: !name:speechbrain.nnet.losses.bce_loss
    allowed_len_diff: 0
    #label_smoothing: 0.01

opt_class: !name:torch.optim.Adam
    lr: !ref <lr>
    weight_decay: 0.1
#opt_class: !name:bitsandbytes.optim.Adam8bit
#    lr: !ref <lr>
#    weight_decay: 0.0001

lr_scheduler: !name:transformers.get_cosine_schedule_with_warmup
    num_warmup_steps: !ref <warmup_epochs> * <samples_per_epoch> // <total_batch_size>
    num_training_steps: !ref <epochs> * <samples_per_epoch> // <total_batch_size>

# Logging + checkpoints
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

# Error computation
error_stats: !name:speechbrain.utils.metric_stats.BinaryMetricStats
    positive_label: 1
error_metric: chunk_F-score

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        #compute_features: !ref <compute_features>
        embedding_model: !ref <embedding_model>
        classifier: !ref <classifier>
        #normalizer: !ref <mean_var_norm>
        counter: !ref <epoch_counter>
        #lr_annealing: !ref <lr_annealing>
