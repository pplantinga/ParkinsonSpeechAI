# ################################
# Model: Parkinson's identification with ECAPA
# Author: Briac Cordelle & Peter Plantinga
# ################################

# Basic parameters
seed: 2096
__set_seed: !apply:torch.manual_seed [!ref <seed>]
lr_factor: 1

# Save folders and paths
experiment_name: llama_dnn
storage_folder: !PLACEHOLDER # where you want to save results ($HOME/scratch/results on compute canada, maybe just results/ on personal machine)
output_folder: !ref <storage_folder>/<experiment_name>/seed_<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt
predictions_file: !ref <output_folder>/predictions.csv
encoded_labels: !ref <save_folder>/label_encoder.txt
transcript_folder: !PLACEHOLDER

# Data files
data_folder: !PLACEHOLDER
noise_folder: !ref <data_folder>/noise
rir_folder: !ref <data_folder>/rir
train_annotation: !ref <storage_folder>/train_text.json
valid_annotation: !ref <storage_folder>/valid_text.json
test_annotation: !ref <storage_folder>/test_text.json
valid_metrics_json: !ref <output_folder>/valid_metrics.json
test_metrics_json: !ref <output_folder>/test_metrics.json

skip_prep: False
ckpt_interval_minutes: 15 # save checkpoint every N min

# Training parameters
epochs: 20
warmup_epochs: 2
samples_per_epoch: 256
total_batch_size: 32
batch_size: 8
grad_accumulation_factor: !ref <total_batch_size> // <batch_size>
lr: 0.0001
base_lr: 0.000001
max_lr: !ref <lr>
step_size: 50
sample_rate: 16000
chunk_size: 30.0 # seconds
loss: bce
input_translate_prob: 0.3
input_drop_frac: 0.2
input_swap_frac: 0.1

# This is formatted as key => list of values to keep
train_keep_keys:
    task: [dpt]
    #task: [vowel_repeat]
    #lang: [en, other]
test_keep_keys:
    task: [dpt]
    #task: [vowel_repeat]

# Test parameters
test_batch_size: 1
metric_categories: [sex, lang]
threshold: 0.5

# Model parameters
# For the pretrained_source, use the path to the model dir
pretrained_source: !PLACEHOLDER
freeze_pretrained: True
feature_size: 2048
embedding_size: 768
dropout: 0.2
out_neurons: 1

# Dataloader options
# Shuffling handled by sampler in train.py
num_workers: 4
train_dataloader_options:
    batch_size: !ref <batch_size>
    num_workers: !ref <num_workers>

valid_dataloader_options:
    batch_size: !ref <test_batch_size>
    num_workers: !ref <num_workers>

test_dataloader_options:
    batch_size: !ref <test_batch_size>
    num_workers: !ref <num_workers>

# Functions
compute_features: !new:llm_encoder.LLM_Encoder
    pretrained_source: !ref <pretrained_source>
    freeze: !ref <freeze_pretrained>

concat_vocal: False
#vocal_features: !new:speechbrain.lobes.features.VocalFeatures
#    sample_rate: !ref <sample_rate>

#vocal_embedding_model: !new:torch.nn.Sequential
#    - !new:speechbrain.nnet.linear.Linear
#        input_size: 17
#        n_neurons: !ref <embedding_size>
#    - !new:torch.nn.Dropout
#        p: !ref <dropout>
#    - !new:torch.nn.LeakyReLU
#    - !new:speechbrain.nnet.pooling.AttentionPooling
#        input_dim: !ref <embedding_size>
#    - !new:speechbrain.nnet.linear.Linear
#        input_size: !ref <embedding_size>
#        n_neurons: !ref <embedding_size>
#    - !new:torch.nn.Dropout
#        p: !ref <dropout>
#    - !new:torch.nn.LeakyReLU

embedding_model: !new:torch.nn.Sequential
    - !new:speechbrain.nnet.linear.Linear
        input_size: !ref <feature_size>
        n_neurons: !ref <embedding_size>
    - !new:torch.nn.Dropout
        p: !ref <dropout>
    - !new:torch.nn.LeakyReLU
    - !new:speechbrain.nnet.pooling.AttentionPooling
        input_dim: !ref <embedding_size>
    - !new:speechbrain.nnet.linear.Linear
        input_size: !ref <embedding_size>
        n_neurons: !ref <embedding_size>
    - !new:torch.nn.Dropout
        p: !ref <dropout>
    - !new:torch.nn.LeakyReLU

classifier: !new:speechbrain.lobes.models.ECAPA_TDNN.Classifier
    input_size: !ref <embedding_size>
    out_neurons: !ref <out_neurons>

# Functions
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <epochs>

#mean_var_norm: !new:speechbrain.processing.features.InputNormalization
#    norm_type: sentence
#    std_norm: False

modules:
    compute_features: !ref <compute_features>
    embedding_model: !ref <embedding_model>
    classifier: !ref <classifier>
    #vocal_features: !ref <vocal_features>
    #vocal_embedding_model: !ref <vocal_embedding_model>
    #mean_var_norm: !ref <mean_var_norm>

softmax: !new:speechbrain.nnet.activations.Softmax
log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True

#focal_loss: !new:focal_loss.FocalLoss
#    gamma: 2.0
#    alpha: [!ref <weight_hc>, !ref <weight_pd>]

kld_loss: !name:speechbrain.nnet.losses.kldiv_loss
    reduction: sum

aam_loss: !new:speechbrain.nnet.losses.AdditiveAngularMargin
    margin: 0.2
    scale: 30

bce_loss: !name:speechbrain.nnet.losses.bce_loss
    allowed_len_diff: 0
    label_smoothing: 0.01

#opt_class: !name:torch.optim.Adam
#    lr: !ref <lr>
#    weight_decay: 0.0001
opt_class: !name:bitsandbytes.optim.Adam8bit
    lr: !ref <lr>
    weight_decay: 0.0001

#lr_annealing: !new:speechbrain.nnet.schedulers.CyclicLRScheduler
#    base_lr: !ref <base_lr>
#    max_lr: !ref <max_lr>
#    step_size: !ref <step_size>

lr_scheduler: !name:transformers.get_cosine_schedule_with_warmup
    num_warmup_steps: !ref <warmup_epochs> * <samples_per_epoch> // <total_batch_size>
    num_training_steps: !ref <epochs> * <samples_per_epoch> // <total_batch_size>

# Logging + checkpoints
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

# Error computation
error_stats: !name:speechbrain.utils.metric_stats.BinaryMetricStats
    positive_label: 1
error_metric: comb_avg_F-score

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        #compute_features: !ref <compute_features>
        embedding_model: !ref <embedding_model>
        classifier: !ref <classifier>
        #normalizer: !ref <mean_var_norm>
        counter: !ref <epoch_counter>
        #lr_annealing: !ref <lr_annealing>
