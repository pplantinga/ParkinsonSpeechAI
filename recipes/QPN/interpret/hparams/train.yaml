
# Basic parameters
seed: 2059
__set_seed: !apply:torch.manual_seed [!ref <seed>]
lr_factor: 1

# Save folders and paths
experiment_name: whisper_small_sae_mask_postpool
storage_folder: !PLACEHOLDER # where you want to save results
output_folder: !ref <storage_folder>/<experiment_name>/seed_<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt
predictions_file: !ref <output_folder>/predictions.csv
encoded_labels: !ref <save_folder>/label_encoder.txt

# Data files
data_folder: !PLACEHOLDER
noise_folder: !ref <data_folder>/noise
rir_folder: !ref <data_folder>/rir
train_annotation: !ref <storage_folder>/train.json
valid_annotation: !ref <storage_folder>/valid.json
test_annotation: !ref <storage_folder>/test.json
noise_annotation: !ref <save_folder>/noise.csv
rir_annotation: !ref <save_folder>/rir.csv
valid_metrics_json: !ref <output_folder>/valid_metrics.json
test_metrics_json: !ref <output_folder>/test_metrics.json

skip_prep: False
ckpt_interval_minutes: 15 # save checkpoint every N min

# Data for augmentation
NOISE_DATASET_URL: https://www.dropbox.com/scl/fi/a09pj97s5ifan81dqhi4n/noises.zip?rlkey=j8b0n9kdjdr32o1f06t0cw5b7&dl=1
RIR_DATASET_URL: https://www.dropbox.com/scl/fi/linhy77c36mu10965a836/RIRs.zip?rlkey=pg9cu8vrpn2u173vhiqyu743u&dl=1

# Training parameters
epochs: 30
warmup_epochs: 5
samples_per_epoch: 490
total_batch_size: 32
batch_size: 32
grad_accumulation_factor: !ref <total_batch_size> // <batch_size>
lr: 0.003
sample_rate: 16000
chunk_size: 30.0 # seconds
sparsity_warmup: 100
sparsity_weight: 0.01
diversity_warmup: 100
diversity_weight: 0.0

# This is formatted as key => list of values to keep
train_keep_keys:
    task: [dpt]
    #task: [vowel_repeat]
    #lang: [en, other]
test_keep_keys:
    task: [dpt]
    #task: [vowel_repeat]

# Test parameters
test_batch_size: 1
metric_categories: [sex, lang]
threshold: 0.5

# Model parameters
# For the pretrained_source, use the path to the model dir
pretrained_source: !PLACEHOLDER
freeze_pretrained: True
feature_size: 768
embedding_size: 768
dropout: 0.1
out_neurons: 1

# Normally this would be larger, but without much data...
# We may just have to accept the lossy compression to some
# understandable number of features.
dictionary_size: 64

# Dataloader options
# Shuffling handled by sampler in train.py
num_workers: 4
train_dataloader_options:
    batch_size: !ref <batch_size>
    num_workers: !ref <num_workers>
    shuffle: True

valid_dataloader_options:
    batch_size: !ref <test_batch_size>
    num_workers: !ref <num_workers>

test_dataloader_options:
    batch_size: !ref <test_batch_size>
    num_workers: !ref <num_workers>

# AUGMENTATIONS
# -------------
# Download and prepare the dataset of noisy sequences for augmentation
prepare_noise_data: !name:speechbrain.augment.preparation.prepare_dataset_from_URL
    URL: !ref <NOISE_DATASET_URL>
    dest_folder: !ref <noise_folder>
    ext: wav
    csv_file: !ref <noise_annotation>
    max_length: !ref <chunk_size>

# Add noise to input signal
add_noise: !new:speechbrain.augment.time_domain.AddNoise
    csv_file: !ref <noise_annotation>
    snr_low: 0
    snr_high: 15
    noise_sample_rate: !ref <sample_rate>
    clean_sample_rate: !ref <sample_rate>
    num_workers: !ref <num_workers>

# Download and prepare the dataset of room impulse responses for augmentation
#prepare_rir_data: !name:speechbrain.augment.preparation.prepare_dataset_from_URL
#    URL: !ref <RIR_DATASET_URL>
#    dest_folder: !ref <rir_folder>
#    ext: wav
#    csv_file: !ref <rir_annotation>
#    max_length: !ref <chunk_size>

# Add reverberation to input signal
#add_reverb: !new:speechbrain.augment.time_domain.AddReverb
#    csv_file: !ref <rir_annotation>
#    reverb_sample_rate: !ref <sample_rate>
#    clean_sample_rate: !ref <sample_rate>
#    num_workers: !ref <num_workers>

# Frequency drop: randomly drops a number of frequency bands to zero.
drop_freq: !new:speechbrain.augment.time_domain.DropFreq
    drop_freq_low: 0
    drop_freq_high: 1
    drop_freq_count_low: 1
    drop_freq_count_high: 3
    drop_freq_width: 0.05

# Time drop: randomly drops a number of temporal chunks.
#drop_chunk: !new:speechbrain.augment.time_domain.DropChunk
#    drop_length_low: 1000
#    drop_length_high: 2000
#    drop_count_low: 1
#    drop_count_high: 5

# Augmenter: Combines previously defined augmentations to perform data augmentation
#wav_augment: !new:speechbrain.augment.augmenter.Augmenter
#    parallel_augment: False
#    concat_original: False
#    min_augmentations: 2
#    max_augmentations: 2
#    augment_prob: 0.9
#    augmentations: [!ref <add_noise>, !ref <drop_freq>]

# Models
#compute_features: !new:speechbrain.lobes.models.huggingface_transformers.wavlm.WavLM
#    source: !ref <pretrained_source>
#    output_norm: True
#    freeze_feature_extractor: True
#    freeze: !ref <freeze_pretrained>
#    save_path: !ref <output_folder>/wavlm-large

compute_features: !new:speechbrain.lobes.models.huggingface_transformers.whisper.Whisper
    source: !ref <pretrained_source>
    encoder_only: True
    freeze: !ref <freeze_pretrained>
    save_path: !ref <output_folder>/whisper

#compute_features: !new:speechbrain.lobes.models.huggingface_transformers.hubert.HuBERT
#    source: !ref <pretrained_source>
#    freeze: !ref <freeze_pretrained>
#    save_path: !ref <output_folder>/whisper

#compute_features: !new:nemo_encoder.NeMoEncoder
#    source: !ref <pretrained_source> / canary-1b.nemo
#    freeze: !ref <freeze_pretrained>
#    nemo_type: "MultiTask"
#    source_dir: !ref <pretrained_source>

#compute_features: !new:xeus_encoder.XEUS_Encoder
#    source: !ref <pretrained_source>
#    freeze: !ref <freeze_pretrained>
#    save_path: !ref <output_folder>/xeus

#embedding_model: !new:speechbrain.lobes.models.ECAPA_TDNN.ECAPA_TDNN
#    input_size: !ref <feature_size>
#    channels: [1024, 1024, 1024, 1024, 3072]
#    kernel_sizes: [5, 3, 3, 3, 1]
#    dilations: [1, 2, 3, 4, 1]
#    groups: [1, 1, 1, 1, 1]
#    attention_channels: 128
#    lin_neurons: !ref <embedding_size>
#    dropout: 0.2

embedding_model: !new:torch.nn.Sequential
    - !new:speechbrain.nnet.linear.Linear
        input_size: !ref <feature_size>
        n_neurons: !ref <embedding_size>
    - !new:torch.nn.Dropout
        p: !ref <dropout>
    - !new:torch.nn.LeakyReLU
    - !new:speechbrain.nnet.pooling.AttentionPooling
        input_dim: !ref <embedding_size>
    - !new:speechbrain.nnet.linear.Linear
        input_size: !ref <embedding_size>
        n_neurons: !ref <embedding_size>
    - !new:torch.nn.Dropout
        p: !ref <dropout>
    - !new:torch.nn.LeakyReLU

# Add this after the last linear -- layer 4
#sae_layer: 4.w
# Try after the pooling layer
sae_layer: "3"
embedding_sae: !new:speechbrain.nnet.adapters.AdaptedModel
    model_to_adapt: !ref <embedding_model>
    adapter_class: !name:sparse_autoencoder.SparseAutoEncoder
    target_layers: [!ref <sae_layer>]
    manual_adapter_insertion: True
    adapter_kwargs:
        dict_size: !ref <dictionary_size>
        module_out_size: !ref <embedding_size>
        activation_fn: mask
        storing_activations: True
        sparse_loss_fn: L1
        mask_temperature: !new:sparse_autoencoder.MaskTemp
            start_temp: 1.0
            stop_temp: 0.2
            steps: 200

# Classifier for comparison purposes
classifier: !new:speechbrain.lobes.models.ECAPA_TDNN.Classifier
    input_size: !ref <embedding_size>
    out_neurons: !ref <out_neurons>

# Functions
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <epochs>

modules:
    compute_features: !ref <compute_features>
    embedding_model: !ref <embedding_model>
    embedding_sae: !ref <embedding_sae>
    classifier: !ref <classifier>

softmax: !new:speechbrain.nnet.activations.Softmax
log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True

opt_class: !name:bitsandbytes.optim.Adam8bit
    lr: !ref <lr>
    weight_decay: 0.0001

lr_scheduler: !name:transformers.get_cosine_schedule_with_warmup
    num_warmup_steps: !ref <warmup_epochs> * <samples_per_epoch> // <total_batch_size>
    num_training_steps: !ref <epochs> * <samples_per_epoch> // <total_batch_size>

# Logging + checkpoints
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        embedding_sae: !ref <embedding_sae>
        counter: !ref <epoch_counter>

pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
    loadables:
        embedding_model: !ref <embedding_model>
        classifier: !ref <classifier>
    paths:
        embedding_model: pretrained/whisper_small/embedding_model.ckpt
        classifier: pretrained/whisper_small/classifier.ckpt
